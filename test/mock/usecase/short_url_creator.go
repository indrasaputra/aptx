// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/short_url_creator.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/aptx/entity"
)

// MockCreateShortURL is a mock of CreateShortURL interface
type MockCreateShortURL struct {
	ctrl     *gomock.Controller
	recorder *MockCreateShortURLMockRecorder
}

// MockCreateShortURLMockRecorder is the mock recorder for MockCreateShortURL
type MockCreateShortURLMockRecorder struct {
	mock *MockCreateShortURL
}

// NewMockCreateShortURL creates a new mock instance
func NewMockCreateShortURL(ctrl *gomock.Controller) *MockCreateShortURL {
	mock := &MockCreateShortURL{ctrl: ctrl}
	mock.recorder = &MockCreateShortURLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateShortURL) EXPECT() *MockCreateShortURLMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCreateShortURL) Create(ctx context.Context, url string) (*entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, url)
	ret0, _ := ret[0].(*entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCreateShortURLMockRecorder) Create(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCreateShortURL)(nil).Create), ctx, url)
}

// MockURLGenerator is a mock of URLGenerator interface
type MockURLGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockURLGeneratorMockRecorder
}

// MockURLGeneratorMockRecorder is the mock recorder for MockURLGenerator
type MockURLGeneratorMockRecorder struct {
	mock *MockURLGenerator
}

// NewMockURLGenerator creates a new mock instance
func NewMockURLGenerator(ctrl *gomock.Controller) *MockURLGenerator {
	mock := &MockURLGenerator{ctrl: ctrl}
	mock.recorder = &MockURLGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLGenerator) EXPECT() *MockURLGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockURLGenerator) Generate(length uint) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", length)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Generate indicates an expected call of Generate
func (mr *MockURLGeneratorMockRecorder) Generate(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockURLGenerator)(nil).Generate), length)
}

// MockCreateShortURLRepository is a mock of CreateShortURLRepository interface
type MockCreateShortURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateShortURLRepositoryMockRecorder
}

// MockCreateShortURLRepositoryMockRecorder is the mock recorder for MockCreateShortURLRepository
type MockCreateShortURLRepositoryMockRecorder struct {
	mock *MockCreateShortURLRepository
}

// NewMockCreateShortURLRepository creates a new mock instance
func NewMockCreateShortURLRepository(ctrl *gomock.Controller) *MockCreateShortURLRepository {
	mock := &MockCreateShortURLRepository{ctrl: ctrl}
	mock.recorder = &MockCreateShortURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateShortURLRepository) EXPECT() *MockCreateShortURLRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockCreateShortURLRepository) Save(ctx context.Context, url *entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockCreateShortURLRepositoryMockRecorder) Save(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCreateShortURLRepository)(nil).Save), ctx, url)
}
