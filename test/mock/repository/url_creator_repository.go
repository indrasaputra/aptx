// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/url_creator_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	entity "github.com/indrasaputra/url-shortener/entity"
)

// MockInsertURLDatabase is a mock of InsertURLDatabase interface
type MockInsertURLDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockInsertURLDatabaseMockRecorder
}

// MockInsertURLDatabaseMockRecorder is the mock recorder for MockInsertURLDatabase
type MockInsertURLDatabaseMockRecorder struct {
	mock *MockInsertURLDatabase
}

// NewMockInsertURLDatabase creates a new mock instance
func NewMockInsertURLDatabase(ctrl *gomock.Controller) *MockInsertURLDatabase {
	mock := &MockInsertURLDatabase{ctrl: ctrl}
	mock.recorder = &MockInsertURLDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInsertURLDatabase) EXPECT() *MockInsertURLDatabaseMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockInsertURLDatabase) Insert(ctx context.Context, url *entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockInsertURLDatabaseMockRecorder) Insert(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockInsertURLDatabase)(nil).Insert), ctx, url)
}

// MockInsertURLCache is a mock of InsertURLCache interface
type MockInsertURLCache struct {
	ctrl     *gomock.Controller
	recorder *MockInsertURLCacheMockRecorder
}

// MockInsertURLCacheMockRecorder is the mock recorder for MockInsertURLCache
type MockInsertURLCacheMockRecorder struct {
	mock *MockInsertURLCache
}

// NewMockInsertURLCache creates a new mock instance
func NewMockInsertURLCache(ctrl *gomock.Controller) *MockInsertURLCache {
	mock := &MockInsertURLCache{ctrl: ctrl}
	mock.recorder = &MockInsertURLCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInsertURLCache) EXPECT() *MockInsertURLCacheMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockInsertURLCache) Save(ctx context.Context, url *entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockInsertURLCacheMockRecorder) Save(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockInsertURLCache)(nil).Save), ctx, url)
}
