// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/health_checker_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHealthCheckerRepository is a mock of HealthCheckerRepository interface
type MockHealthCheckerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckerRepositoryMockRecorder
}

// MockHealthCheckerRepositoryMockRecorder is the mock recorder for MockHealthCheckerRepository
type MockHealthCheckerRepositoryMockRecorder struct {
	mock *MockHealthCheckerRepository
}

// NewMockHealthCheckerRepository creates a new mock instance
func NewMockHealthCheckerRepository(ctrl *gomock.Controller) *MockHealthCheckerRepository {
	mock := &MockHealthCheckerRepository{ctrl: ctrl}
	mock.recorder = &MockHealthCheckerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHealthCheckerRepository) EXPECT() *MockHealthCheckerRepositoryMockRecorder {
	return m.recorder
}

// IsAlive mocks base method
func (m *MockHealthCheckerRepository) IsAlive(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAlive", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAlive indicates an expected call of IsAlive
func (mr *MockHealthCheckerRepositoryMockRecorder) IsAlive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAlive", reflect.TypeOf((*MockHealthCheckerRepository)(nil).IsAlive), ctx)
}
