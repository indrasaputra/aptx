// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/indrasaputra/url-shortener/proto/indrasaputra/shortener/v1 (interfaces: URLShortenerService_StreamAllURLServer)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"

	v1 "github.com/indrasaputra/url-shortener/proto/indrasaputra/shortener/v1"
)

// MockURLShortenerService_StreamAllURLServer is a mock of URLShortenerService_StreamAllURLServer interface
type MockURLShortenerService_StreamAllURLServer struct {
	ctrl     *gomock.Controller
	recorder *MockURLShortenerService_StreamAllURLServerMockRecorder
}

// MockURLShortenerService_StreamAllURLServerMockRecorder is the mock recorder for MockURLShortenerService_StreamAllURLServer
type MockURLShortenerService_StreamAllURLServerMockRecorder struct {
	mock *MockURLShortenerService_StreamAllURLServer
}

// NewMockURLShortenerService_StreamAllURLServer creates a new mock instance
func NewMockURLShortenerService_StreamAllURLServer(ctrl *gomock.Controller) *MockURLShortenerService_StreamAllURLServer {
	mock := &MockURLShortenerService_StreamAllURLServer{ctrl: ctrl}
	mock.recorder = &MockURLShortenerService_StreamAllURLServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockURLShortenerService_StreamAllURLServer) EXPECT() *MockURLShortenerService_StreamAllURLServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockURLShortenerService_StreamAllURLServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockURLShortenerService_StreamAllURLServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockURLShortenerService_StreamAllURLServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockURLShortenerService_StreamAllURLServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockURLShortenerService_StreamAllURLServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockURLShortenerService_StreamAllURLServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockURLShortenerService_StreamAllURLServer) Send(arg0 *v1.StreamAllURLResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockURLShortenerService_StreamAllURLServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockURLShortenerService_StreamAllURLServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockURLShortenerService_StreamAllURLServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockURLShortenerService_StreamAllURLServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockURLShortenerService_StreamAllURLServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockURLShortenerService_StreamAllURLServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockURLShortenerService_StreamAllURLServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockURLShortenerService_StreamAllURLServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockURLShortenerService_StreamAllURLServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockURLShortenerService_StreamAllURLServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockURLShortenerService_StreamAllURLServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockURLShortenerService_StreamAllURLServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockURLShortenerService_StreamAllURLServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockURLShortenerService_StreamAllURLServer)(nil).SetTrailer), arg0)
}
