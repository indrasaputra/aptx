// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aptxv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AptxServiceClient is the client API for AptxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AptxServiceClient interface {
	ShortenURL(ctx context.Context, in *ShortenURLRequest, opts ...grpc.CallOption) (*ShortenURLResponse, error)
	GetAllURL(ctx context.Context, in *GetAllURLRequest, opts ...grpc.CallOption) (*GetAllURLResponse, error)
	StreamAllURL(ctx context.Context, in *StreamAllURLRequest, opts ...grpc.CallOption) (AptxService_StreamAllURLClient, error)
	GetURLDetail(ctx context.Context, in *GetURLDetailRequest, opts ...grpc.CallOption) (*GetURLDetailResponse, error)
}

type aptxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAptxServiceClient(cc grpc.ClientConnInterface) AptxServiceClient {
	return &aptxServiceClient{cc}
}

func (c *aptxServiceClient) ShortenURL(ctx context.Context, in *ShortenURLRequest, opts ...grpc.CallOption) (*ShortenURLResponse, error) {
	out := new(ShortenURLResponse)
	err := c.cc.Invoke(ctx, "/proto.indrasaputra.aptx.v1.AptxService/ShortenURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aptxServiceClient) GetAllURL(ctx context.Context, in *GetAllURLRequest, opts ...grpc.CallOption) (*GetAllURLResponse, error) {
	out := new(GetAllURLResponse)
	err := c.cc.Invoke(ctx, "/proto.indrasaputra.aptx.v1.AptxService/GetAllURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aptxServiceClient) StreamAllURL(ctx context.Context, in *StreamAllURLRequest, opts ...grpc.CallOption) (AptxService_StreamAllURLClient, error) {
	stream, err := c.cc.NewStream(ctx, &AptxService_ServiceDesc.Streams[0], "/proto.indrasaputra.aptx.v1.AptxService/StreamAllURL", opts...)
	if err != nil {
		return nil, err
	}
	x := &aptxServiceStreamAllURLClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AptxService_StreamAllURLClient interface {
	Recv() (*StreamAllURLResponse, error)
	grpc.ClientStream
}

type aptxServiceStreamAllURLClient struct {
	grpc.ClientStream
}

func (x *aptxServiceStreamAllURLClient) Recv() (*StreamAllURLResponse, error) {
	m := new(StreamAllURLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aptxServiceClient) GetURLDetail(ctx context.Context, in *GetURLDetailRequest, opts ...grpc.CallOption) (*GetURLDetailResponse, error) {
	out := new(GetURLDetailResponse)
	err := c.cc.Invoke(ctx, "/proto.indrasaputra.aptx.v1.AptxService/GetURLDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AptxServiceServer is the server API for AptxService service.
// All implementations must embed UnimplementedAptxServiceServer
// for forward compatibility
type AptxServiceServer interface {
	ShortenURL(context.Context, *ShortenURLRequest) (*ShortenURLResponse, error)
	GetAllURL(context.Context, *GetAllURLRequest) (*GetAllURLResponse, error)
	StreamAllURL(*StreamAllURLRequest, AptxService_StreamAllURLServer) error
	GetURLDetail(context.Context, *GetURLDetailRequest) (*GetURLDetailResponse, error)
	mustEmbedUnimplementedAptxServiceServer()
}

// UnimplementedAptxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAptxServiceServer struct {
}

func (UnimplementedAptxServiceServer) ShortenURL(context.Context, *ShortenURLRequest) (*ShortenURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenURL not implemented")
}
func (UnimplementedAptxServiceServer) GetAllURL(context.Context, *GetAllURLRequest) (*GetAllURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllURL not implemented")
}
func (UnimplementedAptxServiceServer) StreamAllURL(*StreamAllURLRequest, AptxService_StreamAllURLServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAllURL not implemented")
}
func (UnimplementedAptxServiceServer) GetURLDetail(context.Context, *GetURLDetailRequest) (*GetURLDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLDetail not implemented")
}
func (UnimplementedAptxServiceServer) mustEmbedUnimplementedAptxServiceServer() {}

// UnsafeAptxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AptxServiceServer will
// result in compilation errors.
type UnsafeAptxServiceServer interface {
	mustEmbedUnimplementedAptxServiceServer()
}

func RegisterAptxServiceServer(s grpc.ServiceRegistrar, srv AptxServiceServer) {
	s.RegisterService(&AptxService_ServiceDesc, srv)
}

func _AptxService_ShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AptxServiceServer).ShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.indrasaputra.aptx.v1.AptxService/ShortenURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AptxServiceServer).ShortenURL(ctx, req.(*ShortenURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AptxService_GetAllURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AptxServiceServer).GetAllURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.indrasaputra.aptx.v1.AptxService/GetAllURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AptxServiceServer).GetAllURL(ctx, req.(*GetAllURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AptxService_StreamAllURL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAllURLRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AptxServiceServer).StreamAllURL(m, &aptxServiceStreamAllURLServer{stream})
}

type AptxService_StreamAllURLServer interface {
	Send(*StreamAllURLResponse) error
	grpc.ServerStream
}

type aptxServiceStreamAllURLServer struct {
	grpc.ServerStream
}

func (x *aptxServiceStreamAllURLServer) Send(m *StreamAllURLResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AptxService_GetURLDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AptxServiceServer).GetURLDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.indrasaputra.aptx.v1.AptxService/GetURLDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AptxServiceServer).GetURLDetail(ctx, req.(*GetURLDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AptxService_ServiceDesc is the grpc.ServiceDesc for AptxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AptxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.indrasaputra.aptx.v1.AptxService",
	HandlerType: (*AptxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenURL",
			Handler:    _AptxService_ShortenURL_Handler,
		},
		{
			MethodName: "GetAllURL",
			Handler:    _AptxService_GetAllURL_Handler,
		},
		{
			MethodName: "GetURLDetail",
			Handler:    _AptxService_GetURLDetail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAllURL",
			Handler:       _AptxService_StreamAllURL_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/indrasaputra/aptx/v1/aptx.proto",
}
