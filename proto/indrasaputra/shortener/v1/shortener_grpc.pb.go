// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shortenerv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// URLShortenerServiceClient is the client API for URLShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLShortenerServiceClient interface {
	CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error)
	GetAllURL(ctx context.Context, in *GetAllURLRequest, opts ...grpc.CallOption) (URLShortenerService_GetAllURLClient, error)
}

type uRLShortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewURLShortenerServiceClient(cc grpc.ClientConnInterface) URLShortenerServiceClient {
	return &uRLShortenerServiceClient{cc}
}

func (c *uRLShortenerServiceClient) CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error) {
	out := new(CreateShortURLResponse)
	err := c.cc.Invoke(ctx, "/proto.indrasaputra.shortener.v1.URLShortenerService/CreateShortURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) GetAllURL(ctx context.Context, in *GetAllURLRequest, opts ...grpc.CallOption) (URLShortenerService_GetAllURLClient, error) {
	stream, err := c.cc.NewStream(ctx, &URLShortenerService_ServiceDesc.Streams[0], "/proto.indrasaputra.shortener.v1.URLShortenerService/GetAllURL", opts...)
	if err != nil {
		return nil, err
	}
	x := &uRLShortenerServiceGetAllURLClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type URLShortenerService_GetAllURLClient interface {
	Recv() (*GetAllURLResponse, error)
	grpc.ClientStream
}

type uRLShortenerServiceGetAllURLClient struct {
	grpc.ClientStream
}

func (x *uRLShortenerServiceGetAllURLClient) Recv() (*GetAllURLResponse, error) {
	m := new(GetAllURLResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// URLShortenerServiceServer is the server API for URLShortenerService service.
// All implementations must embed UnimplementedURLShortenerServiceServer
// for forward compatibility
type URLShortenerServiceServer interface {
	CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error)
	GetAllURL(*GetAllURLRequest, URLShortenerService_GetAllURLServer) error
	mustEmbedUnimplementedURLShortenerServiceServer()
}

// UnimplementedURLShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedURLShortenerServiceServer struct {
}

func (UnimplementedURLShortenerServiceServer) CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) GetAllURL(*GetAllURLRequest, URLShortenerService_GetAllURLServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) mustEmbedUnimplementedURLShortenerServiceServer() {}

// UnsafeURLShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLShortenerServiceServer will
// result in compilation errors.
type UnsafeURLShortenerServiceServer interface {
	mustEmbedUnimplementedURLShortenerServiceServer()
}

func RegisterURLShortenerServiceServer(s grpc.ServiceRegistrar, srv URLShortenerServiceServer) {
	s.RegisterService(&URLShortenerService_ServiceDesc, srv)
}

func _URLShortenerService_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.indrasaputra.shortener.v1.URLShortenerService/CreateShortURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).CreateShortURL(ctx, req.(*CreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_GetAllURL_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllURLRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(URLShortenerServiceServer).GetAllURL(m, &uRLShortenerServiceGetAllURLServer{stream})
}

type URLShortenerService_GetAllURLServer interface {
	Send(*GetAllURLResponse) error
	grpc.ServerStream
}

type uRLShortenerServiceGetAllURLServer struct {
	grpc.ServerStream
}

func (x *uRLShortenerServiceGetAllURLServer) Send(m *GetAllURLResponse) error {
	return x.ServerStream.SendMsg(m)
}

// URLShortenerService_ServiceDesc is the grpc.ServiceDesc for URLShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.indrasaputra.shortener.v1.URLShortenerService",
	HandlerType: (*URLShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortURL",
			Handler:    _URLShortenerService_CreateShortURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllURL",
			Handler:       _URLShortenerService_GetAllURL_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/indrasaputra/shortener/v1/shortener.proto",
}
